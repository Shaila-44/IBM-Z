#include <iostream>
#include <sqlite3.h>
#include <string>

class VehicleManager {
public:
    VehicleManager(const std::string& db_name);
    ~VehicleManager();
    
    bool addVehicle(const std::string& vehicle_id, const std::string& insurance_info, const std::string& fc_info);
    void scanVehicle(const std::string& vehicle_id);
    void notifyCompany(const std::string& message);

private:
    sqlite3* db;
    std::string db_name;

    bool executeSQL(const std::string& sql);
};

VehicleManager::VehicleManager(const std::string& db_name) : db_name(db_name) {
    if (sqlite3_open(db_name.c_str(), &db)) {
        std::cerr << "Can't open database: " << sqlite3_errmsg(db) << std::endl;
        exit(1);
    }
    const char* create_table_sql = "CREATE TABLE IF NOT EXISTS Vehicles ("
                                    "ID TEXT PRIMARY KEY, "
                                    "InsuranceInfo TEXT, "
                                    "FCInfo TEXT);";
    executeSQL(create_table_sql);
}

VehicleManager::~VehicleManager() {
    sqlite3_close(db);
}

bool VehicleManager::executeSQL(const std::string& sql) {
    char* errMsg = nullptr;
    if (sqlite3_exec(db, sql.c_str(), nullptr, nullptr, &errMsg) != SQLITE_OK) {
        std::cerr << "SQL error: " << errMsg << std::endl;
        sqlite3_free(errMsg);
        return false;
    }
    return true;
}

bool VehicleManager::addVehicle(const std::string& vehicle_id, const std::string& insurance_info, const std::string& fc_info) {
    const char* sql = "INSERT INTO Vehicles (ID, InsuranceInfo, FCInfo) VALUES (?, ?, ?);";
    sqlite3_stmt* stmt;

    if (sqlite3_prepare_v2(db, sql, -1, &stmt, nullptr) != SQLITE_OK) {
        std::cerr << "Failed to prepare statement: " << sqlite3_errmsg(db) << std::endl;
        return false;
    }

    sqlite3_bind_text(stmt, 1, vehicle_id.c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, insurance_info.c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 3, fc_info.c_str(), -1, SQLITE_STATIC);

    if (sqlite3_step(stmt) != SQLITE_DONE) {
        std::cerr << "Execution failed: " << sqlite3_errmsg(db) << std::endl;
        sqlite3_finalize(stmt);
        return false;
    }

    sqlite3_finalize(stmt);
    return true;
}

void VehicleManager::scanVehicle(const std::string& vehicle_id) {
    const char* sql = "SELECT * FROM Vehicles WHERE ID = ?;";
    sqlite3_stmt* stmt;

    if (sqlite3_prepare_v2(db, sql, -1, &stmt, nullptr) != SQLITE_OK) {
        std::cerr << "Failed to prepare statement: " << sqlite3_errmsg(db) << std::endl;
        return;
    }

    sqlite3_bind_text(stmt, 1, vehicle_id.c_str(), -1, SQLITE_STATIC);

    if (sqlite3_step(stmt) == SQLITE_ROW) {
        std::string id = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 0));
        std::string insurance = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1));
        std::string fc = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2));
        std::cout << "Vehicle ID: " << id << ", Insurance Info: " << insurance << ", FC Info: " << fc << std::endl;
    } else {
        std::cout << "No record found for Vehicle ID: " << vehicle_id << std::endl;
    }

    sqlite3_finalize(stmt);
}

void VehicleManager::notifyCompany(const std::string& message) {
    // You can integrate an actual notification system here
    std::cout << "Notification to company: " << message << std::endl;
}

int main() {
    VehicleManager vm("/path/to/your/database/vehicles.db"); // Update path accordingly

    // Add a vehicle
    vm.addVehicle("ABC123", "Insured until 2025", "Valid until 2024");

    // Scan for a vehicle
    vm.scanVehicle("ABC123");

    // Notify company
    vm.notifyCompany("Vehicle ABC123 insurance will expire soon.");

    return 0;
}
